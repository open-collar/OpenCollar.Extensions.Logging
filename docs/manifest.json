{
  "homepages": [],
  "source_base_path": "/home/runner/work/OpenCollar.Extensions.Logging/OpenCollar.Extensions.Logging/docs-src/ApiDocs",
  "xrefmap": "xrefmap.yml",
  "files": [
    {
      "type": "Resource",
      "output": {
        "resource": {
          "relative_path": "index.json"
        }
      },
      "is_incremental": false
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/OpenCollar.Extensions.Logging.ITransientContextualInformationScope.yml",
      "output": {
        ".html": {
          "relative_path": "api/OpenCollar.Extensions.Logging.ITransientContextualInformationScope.html",
          "hash": "RgLVL5ut4edPT+EBjOzkFQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/OpenCollar.Extensions.Logging.LoggerExtensions.yml",
      "output": {
        ".html": {
          "relative_path": "api/OpenCollar.Extensions.Logging.LoggerExtensions.html",
          "hash": "ecJ2HUCJFKX8gzUYUHBt2g=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/OpenCollar.Extensions.Logging.LoggingContext.yml",
      "output": {
        ".html": {
          "relative_path": "api/OpenCollar.Extensions.Logging.LoggingContext.html",
          "hash": "VpgXTwNMeA9fX0A8/2gX9w=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/OpenCollar.Extensions.Logging.yml",
      "output": {
        ".html": {
          "relative_path": "api/OpenCollar.Extensions.Logging.html",
          "hash": "iw3yZx+Ff1bRhScjZ4IIeA=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Conceptual",
      "source_relative_path": "api/index.md",
      "output": {
        ".html": {
          "relative_path": "api/index.html",
          "hash": "NoKAJAyLJuaFzlnoyHB+AQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Toc",
      "source_relative_path": "api/toc.yml",
      "output": {
        ".html": {
          "relative_path": "api/toc.html",
          "hash": "EKvYM+li6ZPZWhEW4tlEqQ=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Resource",
      "source_relative_path": "images/favicon.ico",
      "output": {
        "resource": {
          "relative_path": "images/favicon.ico"
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Resource",
      "source_relative_path": "images/favicon.png",
      "output": {
        "resource": {
          "relative_path": "images/favicon.png"
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Resource",
      "source_relative_path": "images/opencollar-icon-48x96x32.png",
      "output": {
        "resource": {
          "relative_path": "images/opencollar-icon-48x96x32.png"
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Conceptual",
      "source_relative_path": "index.md",
      "output": {
        ".html": {
          "relative_path": "index.html",
          "hash": "jMEL5ohG3nxAxobcvhctdw=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Toc",
      "source_relative_path": "toc.yml",
      "output": {
        ".html": {
          "relative_path": "toc.html",
          "hash": "qLR8oaMq+CsSTf9ceS6f5Q=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Conceptual",
      "source_relative_path": "usage/index.md",
      "output": {
        ".html": {
          "relative_path": "usage/index.html",
          "hash": "9YBde5zf8m4O7hYMIKbXow=="
        }
      },
      "is_incremental": false,
      "version": ""
    },
    {
      "type": "Toc",
      "source_relative_path": "usage/toc.yml",
      "output": {
        ".html": {
          "relative_path": "usage/toc.html",
          "hash": "ek2IDqrFkjt4dcCmmDo7IA=="
        }
      },
      "is_incremental": false,
      "version": ""
    }
  ],
  "incremental_info": [
    {
      "status": {
        "can_incremental": false,
        "details": "Cannot build incrementally because last build info is missing.",
        "incrementalPhase": "build",
        "total_file_count": 0,
        "skipped_file_count": 0,
        "full_build_reason_code": "NoAvailableBuildCache"
      },
      "processors": {
        "ManagedReferenceDocumentProcessor": {
          "can_incremental": false,
          "incrementalPhase": "build",
          "total_file_count": 4,
          "skipped_file_count": 0
        },
        "ConceptualDocumentProcessor": {
          "can_incremental": false,
          "incrementalPhase": "build",
          "total_file_count": 3,
          "skipped_file_count": 0
        },
        "ResourceDocumentProcessor": {
          "can_incremental": false,
          "details": "Processor ResourceDocumentProcessor cannot support incremental build because the processor doesn't implement ISupportIncrementalDocumentProcessor interface.",
          "incrementalPhase": "build",
          "total_file_count": 0,
          "skipped_file_count": 0
        },
        "TocDocumentProcessor": {
          "can_incremental": false,
          "details": "Processor TocDocumentProcessor cannot support incremental build because the processor doesn't implement ISupportIncrementalDocumentProcessor interface.",
          "incrementalPhase": "build",
          "total_file_count": 0,
          "skipped_file_count": 0
        }
      }
    },
    {
      "status": {
        "can_incremental": false,
        "details": "Cannot support incremental post processing, the reason is: should not trace intermediate info.",
        "incrementalPhase": "postProcessing",
        "total_file_count": 0,
        "skipped_file_count": 0
      },
      "processors": {}
    }
  ],
  "version_info": {},
  "groups": [
    {
      "xrefmap": "xrefmap.yml"
    }
  ]
}