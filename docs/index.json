{
  "api/OpenCollar.Extensions.Security.html": {
    "href": "api/OpenCollar.Extensions.Security.html",
    "title": "Namespace OpenCollar.Extensions.Logging | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Logging Classes SecureStringExtensions Extensions to the System.Security.SecureString class and related helpers."
  },
  "api/OpenCollar.Extensions.Logging.html": {
    "href": "api/OpenCollar.Extensions.Logging.html",
    "title": "Namespace OpenCollar.Extensions.Logging | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Logging Classes LoggerExtensions Extension methods for the Microsoft.Extensions.Logging.ILogger interface. LoggingContext A class that allows information to be captured for use in providing contextual information when logging. Interfaces ITransientContextualInformationScope A disposable object that allows the values in the logging context to be temporarily changed and then reverted to their original values when disposed of."
  },
  "api/OpenCollar.Onyct.Security.html": {
    "href": "api/OpenCollar.Onyct.Security.html",
    "title": "Namespace OpenCollar.Extension.Security | API Documentation",
    "keywords": "Namespace OpenCollar.Extension.Security Classes Encryption Simple encryption utilities. Threading A class providing static utility methods related to impersonation."
  },
  "api/OpenCollar.Extensions.Logging.ITransientContextualInformationScope.html": {
    "href": "api/OpenCollar.Extensions.Logging.ITransientContextualInformationScope.html",
    "title": "Interface ITransientContextualInformationScope | API Documentation",
    "keywords": "Interface ITransientContextualInformationScope A disposable object that allows the values in the logging context to be temporarily changed and then reverted to their original values when disposed of. Inherited Members System.IDisposable.Dispose() Namespace : OpenCollar.Extensions.Logging Assembly : OpenCollar.Extensions.Logging.dll Syntax public interface ITransientContextualInformationScope : IDisposable Properties Context Gets the current context. Declaration [NotNull] LoggingContext Context { get; } Property Value Type Description LoggingContext The current context. See Also System.IDisposable"
  },
  "api/OpenCollar.Onyct.Security.Encryption.html": {
    "href": "api/OpenCollar.Onyct.Security.Encryption.html",
    "title": "Class Encryption | API Documentation",
    "keywords": "Class Encryption Simple encryption utilities. Inheritance System.Object Encryption Namespace : OpenCollar.Extension.Security Assembly : OpenCollar.Extensions.Logging.dll Syntax public static class Encryption Methods | Improve this Doc View Source Decrypt(String, String) Decrypts the specified encrypted text. Declaration [NotNull] public static string Decrypt([NotNull] string encryptedText, [NotNull] string key) Parameters Type Name Description System.String encryptedText The encrypted text to decrypt. System.String key The string the acts as a pass phrase. Returns Type Description System.String A plaintext string. Exceptions Type Condition System.ArgumentNullException key is null . System.ArgumentException key is zero length. System.ArgumentNullException encryptedText is null . System.ArgumentException encryptedText is zero length. | Improve this Doc View Source Encrypt(String, String) Encrypts the specified plain text. Declaration [NotNull] public static string Encrypt([NotNull] string plainText, [NotNull] string key) Parameters Type Name Description System.String plainText The plain text string to encrypt. System.String key The string the acts as a pass phrase. Returns Type Description System.String A string containing an encrypted representation of the text given Exceptions Type Condition System.ArgumentNullException key is null . System.ArgumentException key is zero length. System.ArgumentNullException plainText is null . System.ArgumentException plainText is zero length."
  },
  "usage/index.html": {
    "href": "usage/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime."
  },
  "api/Wtw.Crb.Common.Core.SecureStringExtensions.html": {
    "href": "api/Wtw.Crb.Common.Core.SecureStringExtensions.html",
    "title": "Class SecureStringExtensions | API Documentation",
    "keywords": "Class SecureStringExtensions Extensions to the System.Security.SecureString class and related helpers. Inheritance System.Object SecureStringExtensions Namespace : OpenCollar.Extensions.Logging Assembly : OpenCollar.Extensions.Logging.dll Syntax public static class SecureStringExtensions Methods | Improve this Doc ToSecureString(String) Converts a standard .NET string into a secure string. Declaration [ContractAnnotation(\"null=>null;notnull=>notnull\")] public static SecureString ToSecureString([CanBeNull] this string value) Parameters Type Name Description System.String value The .NET string to convert. If null then null is returned. Returns Type Description System.Security.SecureString A read-only secure string containing the value supplied in the .NET string, or null if that was supplied. It is the callers responsibility to dispose of the secure string when finished. | Improve this Doc ToSystemString(SecureString) Converts a standard .NET string into secure string. Declaration [ContractAnnotation(\"null=>null;notnull=>notnull\")] public static string ToSystemString([CanBeNull] this SecureString value) Parameters Type Name Description System.Security.SecureString value The secure string to convert. If null then null is returned. Returns Type Description System.String A .NET string containing the value supplied in the secure string, or null if that was supplied."
  },
  "api/OpenCollar.Extensions.Security.SecureStringExtensions.html": {
    "href": "api/OpenCollar.Extensions.Security.SecureStringExtensions.html",
    "title": "Class SecureStringExtensions | API Documentation",
    "keywords": "Class SecureStringExtensions Extensions to the System.Security.SecureString class and related helpers. Inheritance System.Object SecureStringExtensions Namespace : OpenCollar.Extensions.Logging Assembly : OpenCollar.Extensions.Logging.dll Syntax public static class SecureStringExtensions Methods | Improve this Doc View Source ToSecureString(String) Converts a standard .NET string into a secure string. Declaration [ContractAnnotation(\"null=>null;notnull=>notnull\")] public static SecureString ToSecureString([CanBeNull] this string value) Parameters Type Name Description System.String value The .NET string to convert. If null then null is returned. Returns Type Description System.Security.SecureString A read-only secure string containing the value supplied in the .NET string, or null if that was supplied. It is the callers responsibility to dispose of the secure string when finished. | Improve this Doc View Source ToSystemString(SecureString) Converts secure string to a standard .NET string. Declaration [ContractAnnotation(\"null=>null;notnull=>notnull\")] public static string ToSystemString([CanBeNull] this SecureString value) Parameters Type Name Description System.Security.SecureString value The secure string to convert. If null then null is returned. Returns Type Description System.String A .NET string containing the value supplied in the secure string, or null if that was supplied."
  },
  "api/OpenCollar.Onyct.Security.Threading.html": {
    "href": "api/OpenCollar.Onyct.Security.Threading.html",
    "title": "Class Threading | API Documentation",
    "keywords": "Class Threading A class providing static utility methods related to impersonation. Inheritance System.Object Threading Namespace : OpenCollar.Extension.Security Assembly : OpenCollar.Extensions.Logging.dll Syntax public static class Threading Methods | Improve this Doc View Source GetThreadPrincipal() Returns the user on the current thread. Declaration [NotNull] public static IPrincipal GetThreadPrincipal() Returns Type Description System.Security.Principal.IPrincipal A string containing the name of the current thread's user identity. | Improve this Doc View Source GetThreadUser() Returns the user on the current thread. Declaration [NotNull] public static string GetThreadUser() Returns Type Description System.String A string containing the name of the current thread's user identity."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "OpenCollar.Extensions.Logging | API Documentation",
    "keywords": "OpenCollar.Extensions.Logging Support for automatic validation, update and strongly-typed access to configuration. NuGet Package Installation Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.Logging/"
  },
  "api/Wtw.Crb.Common.Core.html": {
    "href": "api/Wtw.Crb.Common.Core.html",
    "title": "Namespace OpenCollar.Extensions.Logging | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Logging Classes SecureStringExtensions Extensions to the System.Security.SecureString class and related helpers."
  },
  "api/OpenCollar.Extensions.Logging.LoggerExtensions.html": {
    "href": "api/OpenCollar.Extensions.Logging.LoggerExtensions.html",
    "title": "Class LoggerExtensions | API Documentation",
    "keywords": "Class LoggerExtensions Extension methods for the Microsoft.Extensions.Logging.ILogger interface. Inheritance System.Object LoggerExtensions Namespace : OpenCollar.Extensions.Logging Assembly : OpenCollar.Extensions.Logging.dll Syntax public static class LoggerExtensions Methods BeginOperation(ILogger, LogLevel, String) Creates a new operation scope. Declaration [NotNull] public static IDisposable BeginOperation([NotNull] this ILogger logger, LogLevel logLevel, [NotNull] string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger to which messages will be written. Microsoft.Extensions.Logging.LogLevel logLevel The level at which to write to the log. System.String message The fragment of message to write. Should be formed to fit into a sentence of the form \"Starting XXX.\" Returns Type Description System.IDisposable A disposable object representing the scope of the operations. Call System.IDisposable.Dispose() on the returned object to complete the operation. Exceptions Type Condition System.ArgumentNullException logger is null . System.ArgumentNullException message is null . System.ArgumentException message is zero-length. System.ArgumentException message contains only white space characters. Log(ILogger, LogLevel, LoggingContext, String) Logs the message given at the specified log level, with additional contextual information taken from the context given. Declaration public static void Log([CanBeNull] this ILogger logger, LogLevel logLevel, [CanBeNull] LoggingContext context, [CanBeNull] string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. Microsoft.Extensions.Logging.LogLevel logLevel The log level at which to log the message. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.String message The message to log. Log(ILogger, LogLevel, Exception, String) Logs the message given at the specified log level, with additional contextual information taken from the context given. Declaration public static void Log([CanBeNull] this ILogger logger, LogLevel logLevel, [CanBeNull] Exception exception, [CanBeNull] string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. Microsoft.Extensions.Logging.LogLevel logLevel The log level at which to log the message. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. Log(ILogger, LogLevel, String) Logs the message given at the specified log level, with additional contextual information taken from the context given. Declaration public static void Log([CanBeNull] this ILogger logger, LogLevel logLevel, [CanBeNull] string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. Microsoft.Extensions.Logging.LogLevel logLevel The log level at which to log the message. System.String message The message to log. LogCritical(ILogger, LoggingContext, Exception, String) Logs the message given with the log level set to \"Critical\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogCritical([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogCritical(ILogger, LoggingContext, String) Logs the message given with the log level set to \"Critical\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogCritical([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.String message The message to log. LogCritical(ILogger, Exception, String) Logs the message given with the log level set to \"Critical\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogCritical([CanBeNull] this ILogger logger, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogCritical(ILogger, String) Logs the message given with the log level set to \"Critical\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogCritical([CanBeNull] this ILogger logger, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.String message The message to log. LogDebug(ILogger, LoggingContext, Exception, String) Logs the message given with the log level set to \"Debug\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogDebug([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogDebug(ILogger, LoggingContext, String) Logs the message given with the log level set to \"Debug\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogDebug([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.String message The message to log. LogDebug(ILogger, Exception, String) Logs the message given with the log level set to \"Debug\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogDebug([CanBeNull] this ILogger logger, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogDebug(ILogger, String) Logs the message given with the log level set to \"Debug\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogDebug([CanBeNull] this ILogger logger, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.String message The message to log. LogError(ILogger, LoggingContext, Exception, String) Logs the message given with the log level set to \"Error\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogError([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogError(ILogger, LoggingContext, String) Logs the message given with the log level set to \"Error\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogError([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.String message The message to log. LogError(ILogger, Exception, String) Logs the message given with the log level set to \"Error\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogError([CanBeNull] this ILogger logger, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogError(ILogger, String) Logs the message given with the log level set to \"Error\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogError([CanBeNull] this ILogger logger, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.String message The message to log. LogInformation(ILogger, LoggingContext, Exception, String) Logs the message given with the log level set to \"Information\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogInformation([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogInformation(ILogger, LoggingContext, String) Logs the message given with the log level set to \"Information\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogInformation([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.String message The message to log. LogInformation(ILogger, Exception, String) Logs the message given with the log level set to \"Information\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogInformation([CanBeNull] this ILogger logger, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogInformation(ILogger, String) Logs the message given with the log level set to \"Information\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogInformation([CanBeNull] this ILogger logger, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.String message The message to log. LogTrace(ILogger, LoggingContext, Exception, String) Logs the message given with the log level set to \"Trace\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogTrace([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogTrace(ILogger, LoggingContext, String) Logs the message given with the log level set to \"Trace\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogTrace([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.String message The message to log. LogTrace(ILogger, Exception, String) Logs the message given with the log level set to \"Trace\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogTrace([CanBeNull] this ILogger logger, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogTrace(ILogger, String) Logs the message given with the log level set to \"Trace\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogTrace([CanBeNull] this ILogger logger, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.String message The message to log. LogWarning(ILogger, LoggingContext, Exception, String) Logs the message given with the log level set to \"Warning\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogWarning([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogWarning(ILogger, LoggingContext, String) Logs the message given with the log level set to \"Warning\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogWarning([CanBeNull] this ILogger logger, [CanBeNull] LoggingContext context, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. LoggingContext context The context from which to take contextual information. If null the current thread's logging context is used. System.String message The message to log. LogWarning(ILogger, Exception, String) Logs the message given with the log level set to \"Warning\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogWarning([CanBeNull] this ILogger logger, [CanBeNull] Exception exception, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.Exception exception The exception to record alongside the message (can be left as null if there is no exception to record). System.String message The message to log. LogWarning(ILogger, String) Logs the message given with the log level set to \"Warning\", with additional contextual information taken from the current thread's logging context. Declaration public static void LogWarning([CanBeNull] this ILogger logger, string message) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger into which to log the message given. System.String message The message to log."
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenCollar.Extensions.Logging | API Documentation",
    "keywords": "OpenCollar.Extensions.Logging A library providing extensions to the Microsoft.Extensions.Logging library adding contextual information and timing mechanisms. NuGet Package Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.Logging/ Project Latest Build: Source Code on GitHub Issue Tracking on GitHub Documentation on GitHub Pages Usage A library providing extensions to the Microsoft.Extensions.Logging library adding contextual information and timing mechanisms. Related Projects OpenCollar.Extensions OpenCollar.Extensions.Collections OpenCollar.Extensions.Configuraton OpenCollar.Extensions.Environment OpenCollar.Extensions.IO OpenCollar.Extensions.Logging OpenCollar.Extensions.Security OpenCollar.Extensions.Threading OpenCollar.Extensions.Validation"
  },
  "api/OpenCollar.Extensions.Logging.LoggingContext.html": {
    "href": "api/OpenCollar.Extensions.Logging.LoggingContext.html",
    "title": "Class LoggingContext | API Documentation",
    "keywords": "Class LoggingContext A class that allows information to be captured for use in providing contextual information when logging. Inheritance System.Object LoggingContext Namespace : OpenCollar.Extensions.Logging Assembly : OpenCollar.Extensions.Logging.dll Syntax public sealed class LoggingContext Methods AddInformation(String, Guid) Adds the information to the context in the form of a key/value pair. Declaration public void AddInformation([CanBeNull] string key, Guid value) Parameters Type Name Description System.String key The key identifying the item of information. This is case-insensitive. null , zero-length or white-space only keys are ignored. System.Guid value This is the value to record against the key given. This is typically an ID that we may want to find when searching logs. AddInformation(String, Int32) Adds the information to the context in the form of a key/value pair. Declaration public void AddInformation([CanBeNull] string key, int value) Parameters Type Name Description System.String key The key identifying the item of information. This is case-insensitive. null , zero-length or white-space only keys are ignored. System.Int32 value This is the value to record against the key given. This is typically an ID that we may want to find when searching logs. AddInformation(String, Nullable<Guid>) Adds the information to the context in the form of a key/value pair. Declaration public void AddInformation([CanBeNull] string key, Guid? value) Parameters Type Name Description System.String key The key identifying the item of information. This is case-insensitive. null , zero-length or white-space only keys are ignored. System.Nullable < System.Guid > value This is the value to record against the key given. This is typically an ID that we may want to find when searching logs. AddInformation(String, Nullable<Int32>) Adds the information to the context in the form of a key/value pair. Declaration public void AddInformation([CanBeNull] string key, int? value) Parameters Type Name Description System.String key The key identifying the item of information. This is case-insensitive. null , zero-length or white-space only keys are ignored. System.Nullable < System.Int32 > value This is the value to record against the key given. This is typically an ID that we may want to find when searching logs. AddInformation(String, String) Adds the information to the context in the form of a key/value pair. Declaration public void AddInformation([CanBeNull] string key, [CanBeNull] string value) Parameters Type Name Description System.String key The key identifying the item of information. This is case-insensitive. null , zero-length or white-space only keys are ignored. System.String value This is the value to record against the key given. This is typically an ID that we may want to find when searching logs. ClearContext() Clears the context for the current thread. Declaration public static void ClearContext() ClearInformation() Removes all information from the current context. Declaration [NotNull] public LoggingContext ClearInformation() Returns Type Description LoggingContext Returns this logging context, allow fluent-style chaining of commands. ClearInformation(String) Removes any information from the current context associated with the key given. Declaration public void ClearInformation([CanBeNull] string key) Parameters Type Name Description System.String key The key identifying the item of information. This is case-insensitive. null , zero-length or white-space only keys are ignored. GetContext() Gets the context for the current thread. Declaration [NotNull] public static LoggingContext GetContext() Returns Type Description LoggingContext The context for the current thread. GetContext(LoggingContext) Gets the context for the current thread, initializing it from the state of the an existing context (e.g. the parent thread's context when a child thread is created). Declaration [NotNull] public static LoggingContext GetContext([CanBeNull] LoggingContext parentContext) Parameters Type Name Description LoggingContext parentContext The parent logging context from which to inherit contextual information. Returns Type Description LoggingContext The context for the current thread. GetSnapshot() Gets a snapshot of the current values held in the context. Declaration [NotNull] public KeyValuePair<string, string>[] GetSnapshot() Returns Type Description System.Collections.Generic.KeyValuePair < System.String , System.String >[] An array containing the key values pairs currently in the context. RevertToSnapshot(KeyValuePair<String, String>[]) Reload the contextual information from the snapshot given. Declaration public void RevertToSnapshot([CanBeNull] KeyValuePair<string, string>[] snapshot) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.String >[] snapshot The snapshot from which to reload. SetHostRole(String) Sets the host role to be used when logging to application insights. Declaration public static void SetHostRole([CanBeNull] string hostRole) Parameters Type Name Description System.String hostRole The host role. StartScope() Initializes and returns a scope that, when disposed of, will revert the contextual information to the values at the time of calling. Declaration [NotNull] public ITransientContextualInformationScope StartScope() Returns Type Description ITransientContextualInformationScope An object that implements the ITransientContextualInformationScope interface that will revert the contextual information held in this logging context on disposal. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides System.Object.ToString()"
  }
}